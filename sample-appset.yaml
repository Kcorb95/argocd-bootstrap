---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: sample 
spec:
  description: "Sample set of services"
  sourceRepos:
    - '*'
  sourceNamespaces:
    - 'sample'
  destinations:
    - namespace: 'sample'
      server: '*'
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace

---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: sample-appset
  namespace: argocd
spec:
  generators:
    # matrix 'parent' generator
    - matrix:
        generators:
          # git generator, 'child' #1
          - git:
              repoURL: https://github.com/rljohnsn/argocd-bootstrap.git
              revision: main
              files:
                - path: "sample-charts/"
          # cluster generator, 'child' #2
          - clusters: {}
  template:
    metadata:
      # Prefix the ArgoCD Application CRD name with the cluster name
      # this gaurantee's uniqueness when dealing with multiple clusters
      # from a single instance of ArgoCD
      name: '{{name}}-{{component}}'
    spec:
      project: 'sample'
      sources:
        # Sample Helm Chart
        - repoURL: '{{chartURL}}'
          targetRevision: '{{chartVersion}}' 
          path: '{{chartPath}}'
          helm: 
            # Helm releaseName resets the name of the installation
            # in the target cluster back to the expected name vs.
            # the ArgoCD Application CRD name which prepends the cluster name
            releaseName: '{{component}}'
            values: |-
              {{values}}
            ignoreMissingValueFiles: true
            valueFiles:
              - '$values/base/values.yaml'
              - '$values/base/{{component}}-values.yaml'
              - '$values/env/{{env}}/values.yaml'
              - '$values/env/{{env}}/{{component}}-values.yaml'
              - '$values/variant/{{region}}/values.yaml'
              - '$values/variant/{{region}}/{{component}}-values.yaml'
              - '$values/variant/{{region}}/{{cluster}}/values.yaml'
              - '$values/variant/{{region}}/{{cluster}}/{{component}}-values.yaml'
        # Values overrides
        - repoURL: '{{valuesURL}}'
          targetRevision: '{{valuesVersion}}' 
          path: '{{valuesPath}}'
          ref: values
      destination:
        server: '{{server}}'
        namespace: '{{namespace}}'

      syncPolicy:
        automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
          prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
          selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
          allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
        syncOptions: # Sync options which helps to modify sync behavior
          - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
          - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
          - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
          - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
        # The retry feature is available since v1.7
          - RespectIgnoreDifferences=true
        retry:
          limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
          backoff:
            duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
            factor: 2 # a factor to multiply the base duration after each failed retry
            maxDuration: 3m # the maximum amount of time allowed for the backoff strategy

      # Will ignore differences between live and desired states during the diff. Note that these configurations are not
      # used during the sync process.
      ignoreDifferences:
        # for the specified managedFields managers
        - group: "*"
          kind: "*"
          managedFieldsManagers:
            - kube-controller-manager